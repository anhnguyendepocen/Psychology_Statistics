- Class: meta
  Course: Psychology Statistics
  Lesson: Measures of Variability
  Author: Kevin R. Carriere
  Type: Standard
  Organization: Georgetown University
  Version: 2.4.3

- Class: text
  Output: Just like the measures of central tendency, there are various ways to measure the variability of the data.

- Class: text 
  Output: Variability is defined as the extent to which data diverges from the average and from which it diverges with other data points around it.

- Class: text 
  Output: In a sense, it refers to how spread out data is. 
  
- Class: text
  Output: "There are also three ways to describe variability we'll talk about. We'll talk about range, interquartile range, and variance and/or standard deviation."

- Class: text
  Output: "The first one is range. Range is the distance between the smallest value and the largest value." 

- Class: text
  Output: Today we have loaded a dataset from R itself. It is a dataset on graduate student applications to UC Berkeley in 1973. 
  
- Class: cmd_question
  Output: "Let's take a look at the data here with the function View(), and one argument, data."
  CorrectAnswer: View(data)
  AnswerTests: omnitest(correctExpr='View(data)')
  Hint: "Don't forget to capitalize View()."

- Class: text
  Output: Great. So we see that there was 4 variables. The first was whether or not they were admitted, the second was gender, the third was an anonymized department number, and the last was a continuous variable counting out how many of each group there were.
  
- Class: cmd_question
  Output: "So, let's look at the descriptive statistics for this dataset. We're going to tell R we want to use the psych package, call the describeBy() function, and pass it one argument, data. Do that now."
  CorrectAnswer: psych::describeBy(data)
  AnswerTests: omnitest(correctExpr='psych::describeBy(data)')
  Hint: "I told you what the package was for a reason. Remember at the beginning of the course, we said in order to be good data scientists we will always be clear about the package we're using. Therefore, we should start our command with psych:: , then call the function, then pass the argument."

#10
- Class: mult_question
  Output: "Okay! So, looking at this information, we see a lot of information. What is the range for Freq?"
  AnswerChoices: 512;504;188.58;24;8;520
  CorrectAnswer: 504
  AnswerTests: omnitest(correctVal='504')

- Class: mult_question
  Output: "Great! And what's the minimum and maximum values that were used to calculate this range?"
  AnswerChoices: 8 and 512; 1 and 2; 179.9 and 182.36; 188.58 and 140.06
  CorrectAnswer: 8 and 512
  AnswerTests: omnitest(correctVal='8 and 512')

- Class: cmd_question
  Output: "We can expand this a little bit. Press the up arrow to get back psych::describeBy(data), and add a second argument, group=data$Admit."
  CorrectAnswer: psych::describeBy(data, group=data$Admit)
  AnswerTests: omnitest(correctExpr='psych::describeBy(data, group=data$Admit)')
  Hint: Try psych::describeBy(data, group=data$Admit) . You might have forgotten the comma that separates out arugments.

- Class: cmd_question
  Output: "What is the range for rejected Freq in this data? Type it in now."
  CorrectAnswer: 383
  AnswerTests: omnitest(correctVal='383')
  Hint: Look at where it says group:Rejected, and look at the range there.

- Class: text
  Output: "One problem we're seeing (potentially) is there's a pretty wide range of admissions data. The range of rejection is between 8 and 391."
  
- Class: text
  Output: "Range by itself cannot tell if there are outliers or not. Imagine our data is actually 8 rejected in Dept A, B, C, D, and E, but 383 rejected in Dept F. Range doesn't tell us what's going on."

- Class: text
  Output: We have similar issues when it comes to the Interquartile Range. 
  
- Class: text
  Output: "This is defined as the difference in values at the third (75th) and first (25th) quartiles of the distribution. It is in a sense the range in the middle."
  
- Class: text
  Output: "This may be better, in some ways, because we are ignoring the outliers below the 25th quartile and above the 75th quartile."

- Class: cmd_question
  Output: Using the stats package, call the quantile() function and pass it one argument, data$Freq.
  CorrectAnswer: stats::quantile(data$Freq)
  AnswerTests: omnitest(correctExpr='stats::quantile(data$Freq)')
  Hint: packagename::functionname(argument)

#20
- Class: cmd_question
  Output: Now, I just told you that the Interquartile Range was the distance between the 75th and 25th percentile. Do the subtraction now to solve for the Interquartile Range.
  CorrectAnswer: 222.5
  AnswerTests: omnitest(correctVal=222.5)

- Class: cmd_question
  Output: There's also a function to do this for us. Call the stats package, the function IQR(), and the one argument, data$Freq.
  CorrectAnswer: stats::IQR(data$Freq)
  AnswerTests: omnitest(correctExpr='stats::IQR(data$Freq)')
  Hint: stats::IQR(data$Freq)

- Class: text 
  Output: "The IQR has the same general problem as range. It just outputs one number based on two separate numbers, whether this is the 0th and 100th percentile or the 25th and 75th. "

- Class: text
  Output: "We also have no real way of understanding how these numbers differ from the average score, or even just the middle score."
  
- Class: text
  Output: "This is where the variance (and standard deviation, which is just another form of variance) comes in."
  
- Class: cmd_question
  Output: "I've loaded a formula for you to look at. Type plot.equation(variancepop)."
  CorrectAnswer: plot.equation(variancepop)
  AnswerTests: omnitest(correctExpr='plot.equation(variancepop)')
  Hint: plot.equation(variancepop) 

- Class: text
  Output: "This formula can be read as The summation (that's the big E) of all X values minus the population mean squared. We divide that big number by N, or the number of people in the population."

- Class: cmd_question
  Output: "Let's look at a very similar, but slightly different formula. Type plot.equation(variancesamp)."
  CorrectAnswer: plot.equation(variancesamp)
  AnswerTests: omnitest(correctExpr='plot.equation(variancesamp)')
  Hint: plot.equation(variancesamp) 

- Class: text
  Output: "This the same thing, but for a sample. We have the summation of all X values (Xi) minus the sample's average (Xbar), all squared, divided by the number of observations we have minus one. Click back and forth on the plots to see the differences."

- Class: text
  Output: More simply, the variance is defined as the average of the squared deviations from the mean.

- Class: text
  Output: "There's a lot to unpack here, so let's just get the bullet points first. First, what is the difference between a population distribution and a sample distribution?"

#30
- Class: text
  Output: "Well, consider the population of the United States. There is an average IQ for the United States. If we had every single person's IQ score (all 321.4 million of them as of 2015), we could state that the average IQ was... "
  
- Class: text
  Output: "But of course that's pretty impossible. So, instead, we might just take a sample of citizens. We would take some smaller number of them, get their average, and try and claim this is the actual average. However, all we truly know is the sample's distribution."

- Class: cmd_question
  Output: Load a second formula with plot.equation(standdev).
  CorrectAnswer: plot.equation(standdev)
  AnswerTests: omnitest(correctExpr='plot.equation(standdev)')
  Hint: plot.equation(standdev)

- Class: text
  Output: "Here, on the left side we see the original equation for variance for a sample. It's sometimes hard to explain what variance is because, as the definition tells us, it is the average of the squared deviations around the mean. What\'s a squared deviation? \n\n If we take the square root of the whole equation, we get something back a little more palatable. This is called the standard deviation."

- Class: text
  Output: "S is the sample's standard deviation."

- Class: text
  Output: "We're going to calculate a sample's standard deviation now. "
  
- Class: cmd_question
  Output: "I've taken a sample of the frequency data - and saved it under calculate_me. Type calculate_me now to see what values we're working with. "
  CorrectAnswer: calculate_me
  AnswerTests: omnitest(correctExpr='calculate_me')
  Hint: calculate_me

- Class: cmd_question
  Output: The first thing we need to calculate is Xbar - the average Frequency. Add all five numbers and divide by the number of observations, and store it as xbar.
  CorrectAnswer: xbar <- 159.6
  AnswerTests: expr_creates_var('xbar'); omnitest(correctVal=159.6)
  Hint: You should be creating a new variable, xbar, and in it, storing (Xi + Xi2 + Xi3+ Xi4+ Xi5)/n, where Xi is each observation, and n is the number of observations.

- Class: cmd_question
  Output: View the mean now by typing xbar. 
  CorrectAnswer: xbar
  AnswerTests: omnitest(correctExpr='xbar')

- Class: cmd_question
  Output: "The next thing we need to do is add up each difference of our values subtracting the mean, and then squaring that term. We will store that in a variable called summation. I'll give you a hint - it should look something like summation <- ((512-159.6)^2+(89-...))."
  CorrectAnswer: summation <- 160489.2
  AnswerTests: expr_creates_var('summation'); omnitest(correctVal=160489.2)

#40
- Class: cmd_question
  Output: View the summation of squared deviations from the mean now by typing summation.
  CorrectAnswer: summation
  AnswerTests: omnitest(correctExpr='summation')

- Class: cmd_question
  Output: "Now, we want to divide summation by n-1 and store it as a new variable, variance."
  CorrectAnswer: variance <- summation/4
  AnswerTests: expr_creates_var('variance'); omnitest(correctVal=40122.3)

- Class: cmd_question
  Output: "Finally, let's take the square root of variance by the sqrt() function, and store it as standarddeviation."
  CorrectAnswer: standarddeviation <- sqrt(variance)
  AnswerTests: expr_creates_var('standarddeviation'); omnitest(correctVal=200.305516648943)
  Hint: Don't forget to store it as standarddeviation!

- Class: cmd_question
  Output: View the final answer by typing standarddeviation.
  CorrectAnswer: standarddeviation
  AnswerTests: omnitest(correctExpr='standarddeviation')

- Class: cmd_question
  Output: And of course, like everything, there is a command that does all of this for us. Using the sd() function, pass it a single argument, calculate_me.
  CorrectAnswer: sd(calculate_me)
  AnswerTests: omnitest(correctExpr='sd(calculate_me)')

- Class: text
  Output: Finally, what you might be saying is, okay, great, I can calculate this formula. But I still have no idea what it means.

- Class: text
  Output: Fair point! Well, I've loaded a graph that can provide the first visual example to what standard deviation is. 

- Class: cmd_question
  Output: Let's imagine we have this test. On average, women scored an 8, while men scored a 4. Type example now. 
  CorrectAnswer: example
  AnswerTests: omnitest(correctExpr='example')

- Class: text
  Output: On the left, we see what this data might look like if we have high standard deviations. On the right, we have what it might look like with low standard deviations. 

- Class: mult_question
  Output: If you had to guess, which pair of data would be statistically different from each other?
  AnswerChoices: Comparing High SD Female to High SD Male;Comparing High SD Female to Low SD Female;Comparing High SD Male to Low SD Male;Comparing Low SD Female to Low SD Male
  CorrectAnswer: Comparing Low SD Female to Low SD Male
  AnswerTests: omnitest(correctVal='Comparing Low SD Female to Low SD Male')
  Hint: Remember that within genders, the scores are still the same (average being a 8 for female and a 4 four males). 

#50
- Class: text
  Output: Exactly! Even visually it's much easier to see a difference in the lower standard deviations. In the high standard deviations, even though the means (averages) might be different, the variation is so high, we are not going to find differences. 


#As of March 1, 2019, I have disabled these questions in a final hope to fix this unknown bug.
#- Class: mult_question
#  Output: Would you like to submit the log of this lesson to Google Forms so that your instructor may evaluate your progress?
#  AnswerChoices: Yes;No
#  CorrectAnswer: NULL
#  AnswerTests: submit_log()
 # Hint: hint

#- Class: mult_question
#  Output: Would you like to answer five short questions about this lesson to Google Forms so that your instructor may evaluate your opinion on this lesson and improve it for others?
#  AnswerChoices: Yes;No
#  CorrectAnswer: NULL
#  AnswerTests: submit_log_two()
#  Hint: hint
